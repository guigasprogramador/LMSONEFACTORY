import { User } from '@/types';
import { toast } from 'sonner';
import { fetchWithAuth } from './api/restClient';

export interface UserFormData {
  name: string;
  email: string;
  role: 'admin' | 'student';
  password?: string;
}

export const userService = {
  // Get all users (admin only)
  async getUsers(): Promise<User[]> {
    try {
      console.log('Buscando usuários da API MySQL...');
      const response = await fetchWithAuth('/auth/admin/users');
      
      if (response && Array.isArray(response)) {
        console.log(`Sucesso! Encontrados ${response.length} usuários`);
        
        // Converter para o tipo User
        return response.map(user => ({
          id: user.id,
          name: user.name || 'Usuário',
          email: user.email || '',
          role: user.role || 'student',
          avatarUrl: user.avatar_url || '',
          createdAt: user.created_at || new Date().toISOString()
        }));
      } else {
        console.log('Nenhum usuário encontrado');
        return [];
      }
    } catch (error) {
      console.error('Erro ao buscar usuários:', error);
      toast.error('Erro ao carregar a lista de usuários');
      return [];
    }
  },
  
  // Create a new user
  async createUser(userData: UserFormData): Promise<User | null> {
    try {
      if (!userData.email || !userData.name) {
        throw new Error('Email e nome são obrigatórios');
      }
      
      // Verificar se o email é válido
      if (!userData.email.includes('@')) {
        throw new Error('Email inválido');
      }
      
      const response = await fetchWithAuth('/auth/admin/users', {
        method: 'POST',
        body: JSON.stringify(userData)
      });
      
      toast.success(`Usuário ${userData.name} criado com sucesso!`);
      
      return {
        id: response.id,
        name: response.name,
        email: response.email,
        role: response.role,
        avatarUrl: response.avatar_url || '',
        createdAt: response.createdAt || new Date().toISOString()
      };
    } catch (error: any) {
      console.error('Erro ao criar usuário:', error);
      toast.error(`Falha ao criar usuário: ${error.message || 'Erro desconhecido'}`);
      throw error;
    }
  },
  
  // Update an existing user
  async updateUser(userId: string, userData: UserFormData): Promise<User | null> {
    try {
      if (!userData.email || !userData.name) {
        throw new Error('Email e nome são obrigatórios');
      }
      
      const response = await fetchWithAuth(`/auth/admin/users/${userId}`, {
        method: 'PUT',
        body: JSON.stringify(userData)
      });
      
      toast.success(`Usuário ${userData.name} atualizado com sucesso!`);
      
      return {
        id: response.id,
        name: response.name,
        email: response.email,
        role: response.role,
        avatarUrl: response.avatar_url || '',
        createdAt: response.createdAt || new Date().toISOString()
      };
    } catch (error: any) {
      console.error('Erro ao atualizar usuário:', error);
      toast.error(`Falha ao atualizar usuário: ${error.message || 'Erro desconhecido'}`);
      throw error;
    }
  },
  
  // Delete a user
  async deleteUser(userId: string): Promise<boolean> {
    try {
      await fetchWithAuth(`/auth/admin/users/${userId}`, {
        method: 'DELETE'
      });
      
      toast.success('Usuário excluído com sucesso!');
      return true;
    } catch (error: any) {
      console.error('Erro ao excluir usuário:', error);
      toast.error(`Falha ao excluir usuário: ${error.message || 'Erro desconhecido'}`);
      throw error;
    }
  },
  
  // Update user role by email
  async updateUserRoleByEmail(email: string, role: 'admin' | 'student'): Promise<boolean> {
    try {
      await fetchWithAuth(`/auth/admin/users/role-by-email`, {
        method: 'PUT',
        body: JSON.stringify({ email, role })
      });
      
      toast.success(`Papel do usuário atualizado para ${role}`);
      return true;
    } catch (error: any) {
      console.error('Erro ao atualizar papel do usuário:', error);
      toast.error(`Falha ao atualizar papel do usuário: ${error.message || 'Erro desconhecido'}`);
      throw error;
    }
  },
  
  // Original method kept for backwards compatibility
  async getAllUsers(): Promise<User[]> {
    return this.getUsers();
  }
};
